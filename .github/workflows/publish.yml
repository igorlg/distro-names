name: Publish to PyPi

on:
  release:
    types: [published]

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Set release notes tag
        run: |
          export RELEASE_TAG_VERSION=${{ github.event.release.tag_name }}
          echo "RELEASE_TAG_VERSION=${RELEASE_TAG_VERSION:1}" >> $GITHUB_ENV
      - name: Ensure new version is also set in pyproject and CHANGELOG
        run: |
          grep --regexp "version \= \"${RELEASE_TAG_VERSION}\"" pyproject.toml
      - name: Install dependencies
        run: make dev
      - name: Run all tests, linting and baselines
        run: make pr
      - name: Build python package and wheel
        run: make build
      - name: Upload to PyPi test
        run: make release-test
        env:
          PYPI_USERNAME: __token__
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
      - name: Upload to PyPi prod
        run: make release-prod
        env:
          PYPI_USERNAME: __token__
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

sync_master:
  needs: upload
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
    - name: Sync master from detached head
      # If version matches CHANGELOG and pyproject.toml
      # If it passes all checks, successfully releases to test and prod
      # Then sync up master with latest source code release
      # where commit message will be Release notes title
      run: git push origin HEAD:refs/heads/master --force

